<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>人生不短</title>
      <link href="/2022/07/01/ren-sheng-bu-duan/"/>
      <url>/2022/07/01/ren-sheng-bu-duan/</url>
      
        <content type="html"><![CDATA[<p>翻译自原文：<a href="https://dkb.show/post/life-is-not-short">Life is not short - stoicism</a></p><p><strong>最让人惊讶的事情是，你不会允许任何人偷取你的财产，却从来都不会阻止他人偷取你更宝贵的时间。</strong></p><p>塞內卡(Seneca)是与马可·奥里略(Marcus Aurelius)和爱比克泰德(Epictetus)并称最著名的斯多葛派<sup>[0]</sup>哲学家之一。如果你想知道怎样才能活的更好，不妨去了解一下他老人家。</p><p>他老人家的人生充满了跌宕起伏，他出生在一个贵族家庭，曾写过很著名著作，也经历过孤岛8年的流放，做过罗马皇帝的首席智库，也因暴力杀人被判处死刑。</p><p>在经历这些的同时，他还提出了巨多的哲学理论。</p><p>在这篇访谈中，我来谈一谈塞内卡这短短的一生，以及我们应该怎样最好的读过我们有限的人生。</p><p><em>(我们将基于他的一篇文章 -《论生命之短暂》(On The Shortness Of Life)，来完成这篇亦真亦幻的访谈。他的回答将来自于他的言论和著作。文中会记录引用以方便你来翻阅每句回答的原文。)</em></p><hr><p><strong><em>DKB：你认为人们生活中犯过最大的错误是什么呢？以及我们总是犯一些什么错误呢？</em></strong></p><p>_塞内卡_：所有人都抱怨生命太短暂了，但是这个观点就是不成立的。生命并不短暂。真正的问题是我们浪费了太多生命。</p><p>生命，对于实现你哪怕最疯狂的梦想来说都是足够长的。而且缺你总是忙着浪费生命，以至于走到生命尽头的时候，都没有好好珍惜它<sup>[1]</sup>。</p><p>最让人想不到的事情就是，你不会允许任何人偷取你的财产，却从来都不会阻止他人偷取你明明更加宝贵的时间<sup>[2]</sup>。</p><p>没人愿意随便把金钱交出去，但是对时间则完全不是这样。你对物质财产非常吝啬，但是对于时间呢，则不然，你对这个世界上本应该最值得吝啬的东西却挥霍的很<sup>[3]</sup>。</p><p>即使你有1000年的寿命，你也会觉得短暂，因为分心走神和每天出现的琐碎事会吞噬掉你的时间<sup>[4]</sup>。</p><p><strong><em>DKB：确实，我们浪费了太多时间。你觉得为什么会这样？我们都知道时间是有限的，但是很多人仍然在犯这种常识性的错误。</em></strong></p><p>_塞内卡_：在你的意识中，你是真的觉得你是可以永远活下去的。你觉得你有无尽的时间供应，所以你不会想太多，然后总是在出现的第一件事情上花费大量的时间，</p><p>在所有你害怕的事情上，你表现得像一个凡人，在所有你渴望的事情上，你表现得像一个永生者<sup>[5]</sup>。</p><p>时间是看不见摸不着的，所以他可以很容易的在你指尖溜走。如果大夫告诉你得了绝症，那你一定会把每一分钱都花在延续生命上。这才是时间于你的真正价值。但是在日常的每一天中，时间对你就像是一文不值的一样，因为你看不见他<sup>[6]</sup>。</p><p>更可怕的是，人们会推迟自己的计划。他们会说，比如”等我40了，我就退休去写本书。”或者”我得先做一些我不喜欢的事来赚钱，等10年后，我就可以做我喜欢的事情啦。”</p><p>这不是在搞笑么？你觉得世界会听你的？你想怎么活就怎么活？谁能保证你能活到那个时候？</p><p>把事情推到未来就是对生命最大的浪费。你寄希望于未来来否定现在。你丢掉了可以掌控的现在，而寄希望于无法确定的未来。</p><p>所有的未来都是个未知数 - 活在当下吧。</p><p><strong><em>DKB：根据自己的情况，实在说，人生计划是有可能延期。比如，可能需要先改善自己的财务状况再去追求梦想。</em></strong></p><p>_塞内卡_：这是合理的，但是你必须要意识到你的时间是有限的，你需要把时间花在通向终点的路上，而不是随意挥洒。</p><p>一定要避免去刻意去追求一条无法给你任何愉悦的道路，这是最失败的。我们以伟大的奥古斯都皇帝为例，他是世界上最强大的人。有着至高无上的地位，数不尽的金钱，无所不能。</p><p>但是尽管这样，他仍然向往着下台退休的那天。想着他可以放下所有权利的那天，就是这个站在权利塔尖的人最开心的时刻<sup>[8]</sup>。</p><p>你一生都在追逐名利，金钱和权力，即使你成功了，也一直不快乐，这多傻啊？这一切的意义是什么？为了给别人留下深刻印象？到最后，这真的值得吗？</p><p>但是，对那些沉迷于权利，地位的游戏中，无法自拔的人来说，这样就可以。他们承受着巨大的社会压力和欺骗，但是他们觉得都是值得的。</p><p>另一方面，浪费时间去追求空洞的快乐和逃避现实，真的让人觉的既失望又可耻。对这种人就真的没什么话可说了<sup>[9]</sup>。</p><p><strong><em>DKB：那么对你来说，什么才是美好生活呢？你说我们既不该追求地位和权利，也不该追求空洞的快乐。那我们就应该躺在海滩上啥也不干吗？</em></strong></p><p>_塞内卡_：我不是说你应该整天躺在海滩上。我是说你应该找点让你自己觉得享受，并且对世界有价值的事情<sup>[10]</sup>。</p><p>你应该有目的地生活，而不是让你的时间一点一点地从你身边被偷走。你应该安排好每一天，就像它是你的最后一天一样，这样你就不再会寄希望于明天，也不会对明天的到来而感到恐惧。你应该避免把时间花在对你不重要的人和事上。</p><p>对时间，你应该非常的节俭，因为，没有任何东西比他更珍贵<sup>[11]</sup>。</p><p>我之前想说的是，虽然有些人总是很忙，而且活了很久，但这并不意味着他们活着的时间很长。他们只是存在的时间长而已。</p><p>想象一下，如果你去航海，离开港口时遇到了一场猛烈的风暴，在你返航之前一直在原地打转。这样的旅行其实并没有看过很多风景，而只是原地转圈圈而已<sup>[12]</sup>。</p><p>你应该把时间花在那些真正重要的极少数的几件事情上面，不要浪费时间了。</p><p>最重要的是，其实有一件事可以延长你的生命。那就是学习前人的哲学，吸收他们的经历。你读的每一本哲学书，都是在把作者一生的经历变成你自己的生命中的一部分。所以，研究哲学才是最值得花时间的事情。<sup>[13]</sup>。</p><p>你可以与苏格拉底争论(Socrates)，可以质疑卡内兹(Carneades)，与伊壁鸠鲁(Epicurus)一起享受退休生活，与斯多葛(Stoics)学派一起打破人性的束缚，与犬儒主义者一起超越人性的极限。你可以把自己全心投入到那无限而永恒的过去<sup>[14]</sup>。</p><p>过去的人也可成为很好的朋友。毕达哥拉斯(Pythagoras)、亚里士多德(Aristotle)和其他所有人，永远不会因为太忙而没有时间见你。他们会让你变得更好。他们都不会强迫你死，但他们都会教你如何死。他们不会浪费你的生命，而是把他们生命融入到你的生命当中。你可以每天都向他们提问，他们总会告诉你真相<sup>[15]</sup>。</p><p>这是延长生命的唯一方法。以你为荣的建筑和纪念碑很快就会被摧毁。时光的河流会摧毁一切，惟有哲学，万世长存，熠熠生辉。</p><p><strong><em>DKB：你还有什么至理名言吗？</em></strong></p><p>_塞内卡_：在我们生命历程中，真正活着的时间很短暂。剩下的并不是生命，只是时间而已。</p><hr><p>引用：<br>0. <a href="https://zh.m.wikipedia.org/zh-hans/%E6%96%AF%E5%A4%9A%E8%91%9B%E4%B8%BB%E7%BE%A9">斯多葛派哲学家</a></p><hr><p>脚注：</p><ol><li>“It is not that we have a short time to live, but that we waste a lot of it. Life is long enough, and a sufficiently generous amount has been given to us for the highest achievements if it were all well invested.”</li><li>“Men do not let anyone seize their estates, and if there is the slightest dispute about their boundaries they rush to stones and arms; but they allow others to encroach on their lives – why, they themselves even invite in those who will take over their lives.”</li><li>“You will find no one willing to share out his money; but to how many does each of us divide up his life! People are frugal in guarding their personal property; but as soon as it comes to squandering time they are most wasteful of the one thing in which it is right to be stingy.”</li><li>“Assuredly your lives, even if they last more than a thousand years, will shrink into the tiniest span: those vices will swallow up any space of time.”</li><li>“So what is the reason for this? You are living as if destined to live for ever; your own frailty never occurs to you; you don’t notice how much time has already passed, but squander it as though you had a full and overflowing supply – though all the while that very day which you are devoting to somebody or something may be your last. You act like mortals in all that you fear, and like immortals in all that you desire.”</li><li>“They are trifling with life’s most precious commodity, being deceived because it is an intangible thing, not open to inspection and therefore reckoned very cheap – in fact, almost without any value. People are delighted to accept pensions and gratuities, for which they hire out their labour or their support or their services. But nobody works out the value of time: men use it lavishly as if it cost nothing. But if death threatens these same people, you will see them praying to their doctors; if they are in fear of capital punishment, you will see them prepared to spend their all to stay alive.”</li><li>“Can anything be more idiotic than certain people who boast of their foresight? They keep themselves officiously preoccupied in order to improve their lives; they spend their lives in organizing their lives. They direct their purposes with an eye to a distant future. But putting things off is the biggest waste of life: it snatches away each day as it comes, and denies us the present by promising the future. The greatest obstacle to living is expectancy, which hangs upon tomorrow and loses today. You are arranging what lies in Fortune’s control, and abandoning what lies in yours. What are you looking at? To what goal are you straining? The whole future lies in uncertainty: live immediately.”</li><li>“So valuable did leisure seem to him that because he could not enjoy it in actuality, he did so mentally in advance. He who saw that everything depended on himself alone, who decided the fortune of individuals and nations, was happiest when thinking of that day on which he would lay aside his own greatness.”</li><li>“But among the worst offenders I count those who spend all their time in drinking and lust, for these are the worst preoccupations of all. Other people, even if they are possessed by an illusory semblance of glory, suffer from a respectable delusion. You can give me a list of miserly men, or hot-tempered men who indulge in unjust hatreds or wars: but they are all sinning in a more manly way. It is those who are on a headlong course of gluttony and lust who are stained with dishonour.”</li><li>“I am not inviting you to idle or purposeless sloth, or to drown all your natural energy in sleep and the pleasures that are dear to the masses. That is not to have repose. When you are retired and enjoying peace of mind, you will find to keep you busy more important activities than all those you have performed so energetically up to now.”</li><li>“Believe me, it is the sign of a great man, and one who is above human error, not to allow his time to be frittered away: he has the longest possible life simply because whatever time was available he devoted entirely to himself. None of it lay fallow and neglected, none of it under another’s control; for being an extremely thrifty guardian of his time he never found anything for which it was worth exchanging.”</li><li>“So you must not think a man has lived long because he has white hair and wrinkles: he has not lived long, just existed long. For suppose you should think that a man had had a long voyage who had been caught in a raging storm as he left harbour, and carried hither and thither and driven round and round in a circle by the rage of opposing winds? He did not have a long voyage, just a long tossing about.”</li><li>“Of all people only those are at leisure who make time for philosophy, only those are really alive. For they not only keep a good watch over their own lifetimes, but they annex every age to theirs. All the years that have passed before them are added to their own.”</li><li>“We can argue with Socrates, express doubt with Carneades, cultivate retirement with Epicurus, overcome human nature with the Stoics, and exceed its limits with the Cynics. Since nature allows us to enter into a partnership with every age, why not turn from this brief and transient spell of time and give ourselves wholeheartedly to the past, which is limitless and eternal and can be shared with better men than we?”</li><li>“You should rather suppose that those are involved in worthwhile duties who wish to have daily as their closest friends Zeno, Pythagoras, Democritus and all the other high priests of liberal studies, and Aristotle and Theophrastus. None of these will be too busy to see you, none of these will not send his visitor away happier and more devoted to himself, none of these will allow anyone to depart empty-handed. They are at home to all mortals by night and by day. None of these will force you to die, but all will teach you how to die. None of them will exhaust your years, but each will contribute his years to yours.”</li><li>“This is the only way to prolong mortality – even to convert it to immortality. Honours, monuments, whatever the ambitious have ordered by decrees or raised in public buildings are soon destroyed: there is nothing that the passage of time does not demolish and remove. But it cannot damage the works which philosophy has consecrated: no age will wipe them out, no age diminish them. The next and every following age will only increase the veneration for them, since envy operates on what is at hand, but we can more openly admire things from a distance.”</li></ol>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AnotationProcessor相关</title>
      <link href="/2022/01/12/anotationprocessor-xiang-guan/"/>
      <url>/2022/01/12/anotationprocessor-xiang-guan/</url>
      
        <content type="html"><![CDATA[<h1 id="前话"><a href="#前话" class="headerlink" title="前话"></a>前话</h1><p>干活的时候，很多时候都是增删改查，重复劳动。甚至有的东西，就纯粹是一个模式，CV大法。<br>比如从数据库的Entity类，转换成给前端的数据，很多时候是原封不动，或者做一些简单的编辑。<br>那既然java的注解那么强大，为啥不琢磨琢磨整一个注解来解决这些事情呢？</p><h1 id="原材料"><a href="#原材料" class="headerlink" title="原材料"></a>原材料</h1><h2 id="tools-jar"><a href="#tools-jar" class="headerlink" title="tools.jar"></a><code>tools.jar</code></h2><p>这个在<code>1.8</code>以及之前的<code>jdk</code>包中，是可以在安装目录下找到的。<br>但是之后的版本中就没有了，我这里用的是<code>java 11</code>，但是用<code>1.8</code>版本的<code>tools.jar</code>也是没毛病的。</p><h2 id="AbstractProcessor"><a href="#AbstractProcessor" class="headerlink" title="AbstractProcessor"></a><code>AbstractProcessor</code></h2><p>这个是注解处理器，在编译时通过注解来生成一些代码，就需要用这个。比如大名鼎鼎的<code>lombok</code>也是通过这个实现了很多功能。</p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="AbstractProcessor-1"><a href="#AbstractProcessor-1" class="headerlink" title="AbstractProcessor"></a>AbstractProcessor</h2><p>这个就是注解处理器，他有两个方法，需要我们实现。<br>此外，还需要配置该注解处理器感兴趣的注解以及指定<code>java</code>版本。<br>后者可以通过注解或者实现<code>AbstractProcessor</code>方法两种方式来实现。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="SupportedAnnotationTypes"><a href="#SupportedAnnotationTypes" class="headerlink" title="SupportedAnnotationTypes"></a>SupportedAnnotationTypes</h4><p>配置注解处理器感兴趣的注解，这里可以通过实现</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getSupportedAnnotationTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>方法来配置。</p><h4 id="SupportedSourceVersion"><a href="#SupportedSourceVersion" class="headerlink" title="SupportedSourceVersion"></a>SupportedSourceVersion</h4><p>设定<code>java</code>版本，这里也可以通过实现</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> SourceVersion <span class="token function">getSupportedSourceVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>来配置。</p><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><p>获取注解处理器需要用到的一些对象。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>ProcessingEnvironment processingEnv<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>processingEnv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="process"><a href="#process" class="headerlink" title="process"></a>process</h3><p>注解处理器的关键方法，用来根据注解对编译过程就行干预。<br>返回值表示这个过程中，代码是否发生了修改。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">process</span><span class="token punctuation">(</span>Set<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">TypeElement</span><span class="token operator">></span> annotations<span class="token punctuation">,</span> RoundEnvironment roundEnv<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><h3 id="Import"><a href="#Import" class="headerlink" title="Import"></a>Import</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addImportInfo</span><span class="token punctuation">(</span>Element element<span class="token punctuation">,</span> String classPath<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> idx <span class="token operator">=</span> classPath<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String pkg <span class="token operator">=</span> classPath<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">,</span> clz <span class="token operator">=</span> classPath<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TreePath treePath <span class="token operator">=</span> trees<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>        Tree leaf <span class="token operator">=</span> treePath<span class="token punctuation">.</span><span class="token function">getLeaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>treePath<span class="token punctuation">.</span><span class="token function">getCompilationUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">JCTree<span class="token punctuation">.</span>JCCompilationUnit</span> <span class="token operator">&amp;&amp;</span> leaf <span class="token keyword">instanceof</span> <span class="token class-name">JCTree</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            JCTree<span class="token punctuation">.</span>JCCompilationUnit jccu <span class="token operator">=</span> <span class="token punctuation">(</span>JCTree<span class="token punctuation">.</span>JCCompilationUnit<span class="token punctuation">)</span> treePath<span class="token punctuation">.</span><span class="token function">getCompilationUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>JCTree jcTree <span class="token operator">:</span> jccu<span class="token punctuation">.</span><span class="token function">getImports</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>jcTree <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> jcTree <span class="token keyword">instanceof</span> <span class="token class-name">JCTree<span class="token punctuation">.</span>JCImport</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    JCTree<span class="token punctuation">.</span>JCImport jcImport <span class="token operator">=</span> <span class="token punctuation">(</span>JCTree<span class="token punctuation">.</span>JCImport<span class="token punctuation">)</span> jcTree<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>jcImport<span class="token punctuation">.</span>qualid <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> jcImport<span class="token punctuation">.</span>qualid <span class="token keyword">instanceof</span> <span class="token class-name">JCTree<span class="token punctuation">.</span>JCFieldAccess</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        JCTree<span class="token punctuation">.</span>JCFieldAccess jcFieldAccess <span class="token operator">=</span> <span class="token punctuation">(</span>JCTree<span class="token punctuation">.</span>JCFieldAccess<span class="token punctuation">)</span> jcImport<span class="token punctuation">.</span>qualid<span class="token punctuation">;</span>                        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>pkg<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>jcFieldAccess<span class="token punctuation">.</span>selected<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> clz<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>jcFieldAccess<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                                <span class="token keyword">return</span><span class="token punctuation">;</span>                            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token operator">&lt;</span>JCTree<span class="token operator">></span> trees <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            trees<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>jccu<span class="token punctuation">.</span>defs<span class="token punctuation">)</span><span class="token punctuation">;</span>            JCTree<span class="token punctuation">.</span>JCIdent ident <span class="token operator">=</span> treeMaker<span class="token punctuation">.</span><span class="token function">Ident</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">fromString</span><span class="token punctuation">(</span>pkg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            JCTree<span class="token punctuation">.</span>JCImport jcImport <span class="token operator">=</span> treeMaker<span class="token punctuation">.</span><span class="token function">Import</span><span class="token punctuation">(</span>treeMaker<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>                ident<span class="token punctuation">,</span> names<span class="token punctuation">.</span><span class="token function">fromString</span><span class="token punctuation">(</span>clz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>JCTree tree<span class="token operator">:</span> trees<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tree <span class="token keyword">instanceof</span> <span class="token class-name">JCTree<span class="token punctuation">.</span>JCPackageDecl</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token operator">++</span>idx<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>trees<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>jcImport<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                trees<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> jcImport<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            jccu<span class="token punctuation">.</span>defs <span class="token operator">=</span> List<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>trees<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个方法有一个问题，就是如果在代码中并没有真正使用引入的类，那么即使调用了这个方法，那编译出来的<code>.class</code>文件依然会把这条多余的引用语句删掉。</p><h3 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h3><h4 id="获取类的所有字段"><a href="#获取类的所有字段" class="headerlink" title="获取类的所有字段"></a>获取类的所有字段</h4><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>JCTree<span class="token punctuation">.</span>JCVariableDecl<span class="token operator">></span> <span class="token function">getJCVariables</span><span class="token punctuation">(</span>JCTree<span class="token punctuation">.</span>JCClassDecl jcClass<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ListBuffer<span class="token operator">&lt;</span>JCTree<span class="token punctuation">.</span>JCVariableDecl<span class="token operator">></span> jcVariables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListBuffer</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历jcClass的所有内部节点，可能是字段，方法等等</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>JCTree jcTree <span class="token operator">:</span> jcClass<span class="token punctuation">.</span>defs<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//找出所有set方法节点，并添加</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isValidField</span><span class="token punctuation">(</span>jcTree<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//注意这个com.sun.tools.javac.util.List的用法，不支持链式操作，更改后必须赋值</span>                jcVariables<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span>JCTree<span class="token punctuation">.</span>JCVariableDecl<span class="token punctuation">)</span> jcTree<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> jcVariables<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="生成get方法"><a href="#生成get方法" class="headerlink" title="生成get方法"></a>生成<code>get</code>方法</h4><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> JCTree<span class="token punctuation">.</span>JCMethodDecl <span class="token function">makeGetterMethodDecl</span><span class="token punctuation">(</span>JCTree<span class="token punctuation">.</span>JCVariableDecl jcVariableDecl<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ListBuffer<span class="token operator">&lt;</span>JCTree<span class="token punctuation">.</span>JCStatement<span class="token operator">></span> statements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListBuffer</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        statements<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>treeMaker<span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span>treeMaker<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>treeMaker<span class="token punctuation">.</span><span class="token function">Ident</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">fromString</span><span class="token punctuation">(</span><span class="token string">"this"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> jcVariableDecl<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JCTree<span class="token punctuation">.</span>JCBlock body <span class="token operator">=</span> treeMaker<span class="token punctuation">.</span><span class="token function">Block</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> statements<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> treeMaker<span class="token punctuation">.</span><span class="token function">MethodDef</span><span class="token punctuation">(</span>treeMaker<span class="token punctuation">.</span><span class="token function">Modifiers</span><span class="token punctuation">(</span>Flags<span class="token punctuation">.</span>PUBLIC<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getNewMethodName</span><span class="token punctuation">(</span>jcVariableDecl<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> jcVariableDecl<span class="token punctuation">.</span>vartype<span class="token punctuation">,</span> List<span class="token punctuation">.</span><span class="token function">nil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> List<span class="token punctuation">.</span><span class="token function">nil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> List<span class="token punctuation">.</span><span class="token function">nil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> body<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Name <span class="token function">getNewMethodName</span><span class="token punctuation">(</span>Name name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> names<span class="token punctuation">.</span><span class="token function">fromString</span><span class="token punctuation">(</span><span class="token string">"hello"</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="NoArgsConstructor"><a href="#NoArgsConstructor" class="headerlink" title="NoArgsConstructor"></a>NoArgsConstructor</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> JCTree<span class="token punctuation">.</span>JCMethodDecl <span class="token function">createNoArgsConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        JCTree<span class="token punctuation">.</span>JCBlock jcBlock <span class="token operator">=</span> treeMaker<span class="token punctuation">.</span><span class="token function">Block</span><span class="token punctuation">(</span>                <span class="token number">0</span> <span class="token comment" spellcheck="true">//访问标志</span>                <span class="token punctuation">,</span> List<span class="token punctuation">.</span><span class="token function">nil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//所有的语句</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> treeMaker<span class="token punctuation">.</span><span class="token function">MethodDef</span><span class="token punctuation">(</span>                treeMaker<span class="token punctuation">.</span><span class="token function">Modifiers</span><span class="token punctuation">(</span>Flags<span class="token punctuation">.</span>PUBLIC<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//访问标志</span>                names<span class="token punctuation">.</span><span class="token function">fromString</span><span class="token punctuation">(</span>CONSTRUCTOR_NAME<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//名字</span>                treeMaker<span class="token punctuation">.</span><span class="token function">TypeIdent</span><span class="token punctuation">(</span>TypeTag<span class="token punctuation">.</span>VOID<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//返回类型</span>                List<span class="token punctuation">.</span><span class="token function">nil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//泛型形参列表</span>                List<span class="token punctuation">.</span><span class="token function">nil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//参数列表</span>                List<span class="token punctuation">.</span><span class="token function">nil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//异常列表</span>                jcBlock<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//方法体</span>                null <span class="token comment" spellcheck="true">//默认方法（可能是interface中的那个default）</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="AllArgsConstructor"><a href="#AllArgsConstructor" class="headerlink" title="AllArgsConstructor"></a>AllArgsConstructor</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> JCTree<span class="token punctuation">.</span>JCMethodDecl <span class="token function">createAllArgsConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ListBuffer<span class="token operator">&lt;</span>JCTree<span class="token punctuation">.</span>JCStatement<span class="token operator">></span> jcStatements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListBuffer</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>JCTree<span class="token punctuation">.</span>JCVariableDecl jcVariable <span class="token operator">:</span> fieldJCVariables<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//添加构造方法的赋值语句 " this.xxx = xxx; "</span>            jcStatements<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>                    treeMaker<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>                            treeMaker<span class="token punctuation">.</span><span class="token function">Assign</span><span class="token punctuation">(</span>                                    treeMaker<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>                                            treeMaker<span class="token punctuation">.</span><span class="token function">Ident</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">fromString</span><span class="token punctuation">(</span>THIS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                            names<span class="token punctuation">.</span><span class="token function">fromString</span><span class="token punctuation">(</span>jcVariable<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                    <span class="token punctuation">)</span><span class="token punctuation">,</span>                                    treeMaker<span class="token punctuation">.</span><span class="token function">Ident</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">fromString</span><span class="token punctuation">(</span>jcVariable<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">)</span>                    <span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        JCTree<span class="token punctuation">.</span>JCBlock jcBlock <span class="token operator">=</span> treeMaker<span class="token punctuation">.</span><span class="token function">Block</span><span class="token punctuation">(</span>                <span class="token number">0</span> <span class="token comment" spellcheck="true">//访问标志</span>                <span class="token punctuation">,</span> jcStatements<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//所有的语句</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> treeMaker<span class="token punctuation">.</span><span class="token function">MethodDef</span><span class="token punctuation">(</span>                treeMaker<span class="token punctuation">.</span><span class="token function">Modifiers</span><span class="token punctuation">(</span>Flags<span class="token punctuation">.</span>PUBLIC<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//访问标志</span>                names<span class="token punctuation">.</span><span class="token function">fromString</span><span class="token punctuation">(</span>CONSTRUCTOR_NAME<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//名字</span>                treeMaker<span class="token punctuation">.</span><span class="token function">TypeIdent</span><span class="token punctuation">(</span>TypeTag<span class="token punctuation">.</span>VOID<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//返回类型</span>                List<span class="token punctuation">.</span><span class="token function">nil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//泛型形参列表</span>                <span class="token function">cloneJCVariablesAsParams</span><span class="token punctuation">(</span>treeMaker<span class="token punctuation">,</span> fieldJCVariables<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//参数列表</span>                List<span class="token punctuation">.</span><span class="token function">nil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//异常列表</span>                jcBlock<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//方法体</span>                null <span class="token comment" spellcheck="true">//默认方法（可能是interface中的那个default）</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="EntityToDtoConstructor"><a href="#EntityToDtoConstructor" class="headerlink" title="EntityToDtoConstructor"></a>EntityToDtoConstructor</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> JCTree<span class="token punctuation">.</span>JCMethodDecl <span class="token function">createToEntityConstructor</span><span class="token punctuation">(</span>Element element<span class="token punctuation">,</span> String mappings<span class="token punctuation">,</span> Element param<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ListBuffer<span class="token operator">&lt;</span>JCTree<span class="token punctuation">.</span>JCVariableDecl<span class="token operator">></span> jcVariables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListBuffer</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jcVariables<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>                treeMaker<span class="token punctuation">.</span><span class="token function">Param</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">fromString</span><span class="token punctuation">(</span><span class="token string">"entity"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>Type<span class="token punctuation">)</span> param<span class="token punctuation">.</span><span class="token function">asType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListBuffer<span class="token operator">&lt;</span>JCTree<span class="token punctuation">.</span>JCStatement<span class="token operator">></span> jcStatements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListBuffer</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>JCTree<span class="token punctuation">.</span>JCVariableDecl jcVariable<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fieldJCVariables<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            jcStatements<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>                    treeMaker<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>                            treeMaker<span class="token punctuation">.</span><span class="token function">Assign</span><span class="token punctuation">(</span>                                    treeMaker<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>                                            treeMaker<span class="token punctuation">.</span><span class="token function">Ident</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">fromString</span><span class="token punctuation">(</span>ProcessUtil<span class="token punctuation">.</span>THIS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                            jcVariable<span class="token punctuation">.</span>name                                    <span class="token punctuation">)</span><span class="token punctuation">,</span>                                    treeMaker<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>                                            treeMaker<span class="token punctuation">.</span><span class="token function">Ident</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">fromString</span><span class="token punctuation">(</span><span class="token string">"entity"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                            jcVariable<span class="token punctuation">.</span>name                                    <span class="token punctuation">)</span>                            <span class="token punctuation">)</span>                    <span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> treeMaker<span class="token punctuation">.</span><span class="token function">MethodDef</span><span class="token punctuation">(</span>                treeMaker<span class="token punctuation">.</span><span class="token function">Modifiers</span><span class="token punctuation">(</span>Flags<span class="token punctuation">.</span>PUBLIC<span class="token punctuation">)</span><span class="token punctuation">,</span>                names<span class="token punctuation">.</span><span class="token function">fromString</span><span class="token punctuation">(</span>ProcessUtil<span class="token punctuation">.</span>CONSTRUCTOR_NAME<span class="token punctuation">)</span><span class="token punctuation">,</span>                treeMaker<span class="token punctuation">.</span><span class="token function">TypeIdent</span><span class="token punctuation">(</span>TypeTag<span class="token punctuation">.</span>VOID<span class="token punctuation">)</span><span class="token punctuation">,</span>                List<span class="token punctuation">.</span><span class="token function">nil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                jcVariables<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                List<span class="token punctuation">.</span><span class="token function">nil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                treeMaker<span class="token punctuation">.</span><span class="token function">Block</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> jcStatements<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                null        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h1><h2 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h2><h3 id="1-8以上java版本如何使用tools-jar"><a href="#1-8以上java版本如何使用tools-jar" class="headerlink" title="1.8以上java版本如何使用tools.jar"></a><code>1.8</code>以上<code>java</code>版本如何使用<code>tools.jar</code></h3><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.sun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>system<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>systemPath</span><span class="token punctuation">></span></span>$<span class="token entity" title="&#123;">&amp;#123;</span>project.basedir<span class="token entity" title="&#125;">&amp;#125;</span>/src/lib/tools.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>systemPath</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="auto-service"><a href="#auto-service" class="headerlink" title="auto-service"></a><code>auto-service</code></h3><p>在注解处理器的依赖中，最好增加这个依赖，他会自动生成<code>javax.annotation.processing.Processor</code>文件。</p><h3 id="怎么调试注解处理器"><a href="#怎么调试注解处理器" class="headerlink" title="怎么调试注解处理器"></a>怎么调试注解处理器</h3><p><code>idea</code>右上角<code>Edit Configurations...</code>处，新增一个<code>Remote JVM Debug</code>，端口<code>5005</code>默认即可。 如图所示:<br><img src="./1.png"><br>然后两下上档键，输入<code>enable build process</code>，置为<code>ON</code>，如图所示：<br><img src="./2.png"><br>然后加上断点，正常启动项目，并<code>debug</code>启动新增的<code>remote debug</code>即可进入断点调试。</p><h3 id="关于idea版本"><a href="#关于idea版本" class="headerlink" title="关于idea版本"></a>关于<code>idea</code>版本</h3><p>新版<code>idea</code>对注解处理器的支持似乎有一些问题。需要在<code>Perferences -&gt; Build, Execution, Deployment -&gt; Compiler -&gt; Shared builid process VM options</code><br>处填上<code>-Djps.track.ap.dependencies=false</code><br><img src="./3.png"></p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p><a href="https://github.com/yihchu/Demos/tree/master/AnnotationProcessorDemo">GITHUB</a></p><p><a href="https://yihchu.github.io/2022/01/12/anotationprocessor-xiang-guan/">BLOG</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.mythsman.com/post/5d2c11c767f841464434a3bf/">Lombok原理分析与功能实现</a></p><p><a href="https://liuyehcf.github.io/2018/02/02/Java-JSR-269-%E6%8F%92%E5%85%A5%E5%BC%8F%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86%E5%99%A8/">Java-JSR-269-插入式注解处理器</a></p><p><a href="https://blog.csdn.net/nideshouhu/article/details/90757952#comments_19673727">关于ast抽象语法树JcImport和JCCompilationUnit的用法</a></p>]]></content>
      
      
      <categories>
          
          <category> 遇到的问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AnnotationProcessor </tag>
            
            <tag> compile </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于WebSocket跨域的问题</title>
      <link href="/2021/10/14/guan-yu-websocket-kua-yu-de-wen-ti/"/>
      <url>/2021/10/14/guan-yu-websocket-kua-yu-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="前话"><a href="#前话" class="headerlink" title="前话"></a>前话</h1><p>最近在搞<code>WebSocket</code>，前后端分离，需要解决一下跨域的问题。跨域，本来也不是什么难事，但是这次就遇到了一些状况。记录一下。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在项目里配置<code>WebSocket</code>需要实现<code>WebSocketMessageBrokerConfigurer</code>接口，而该接口需要实现一个方法，<code>registerStompEndpoints(StompEndpointRegistry registry)</code>。</p><p>如果需要跨域，那么有两种方式，一个是<code>setAllowedOrigins</code>，另一个就是<code>setAllowedOriginPatterns</code>，后者明显更灵活。</p><p>这里，我就想限制一下本地，不限制端口号，于是简单看了下文档，看到格式中有这么一行：</p><p><code>https://*.domain1.com:[*] -- domains ending with domain1.com on any port, including the default port</code></p><p>寻思，正好符合我的需求。于是我就写成了<code>http://localhost:[*]</code>，然后在Demo中测试通过，开开心心的把这个东西挪到了项目中。</p><p>但是，当项目跑起来，却发现，不是那么回事啊，发过去的请求居然告诉我<br><code>Access to XMLHttpRequest at &#39;xxxxxx&#39; from origin &#39;http://localhost:9002&#39; has been blocked by CORS policy: No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource.</code></p><p>我就懵了~</p><p>但是当我把<code>http://localhost:[*]</code>换成了<code>http://localhost:*</code>，又通过了。</p><p>这是为啥呢？</p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>经过了一顿<code>debug</code>和寻找，比对。我终于发现了我两个项目里面<code>spring-boot-starter-web</code>版本是不一样的，<code>Demo</code>是<code>2.5.5</code>，而正经项目是<code>2.4.5</code>。</p><p>所以，我感觉肯定是这两个版本在对<code>request</code>的处理方式不一样。所以，又是一顿debug，然后，发现处理逻辑虽有不同，但是对于<code>origin</code>的检查基本上差不多。</p><p>给放两张图：</p><p><img src="./2.4.5-1.png"></p><p><img src="./2.5.5-1.png"></p><p>可以看出，在处理<code>originPatterns</code>上，基本上是一样的。</p><p>所以我就更不明白了~</p><p>想了想，想起来《盗墓笔记》里的一句话（原话忘了）：”列出所有可能性，一一排除之后，剩下的最后一个，无论他多么不合理，那他也是真理。”</p><p>所以，问题只能是出在正则匹配这里了。</p><p>但是，正则表达式的匹配，这是<code>java.util</code>里面的内容。跟<code>spring</code>似乎也没啥关系。</p><p>那问题还能出现在哪里呢？</p><p>又经过了一顿<code>debug</code>，哇，终于发现在正则表达式验证时，<code>pattern</code>不一样了~ </p><p>如下图所示：</p><p><img src="./2.4.5-2.png"></p><p><img src="./2.5.5-2.png"></p><p>前者是<code>2.4.5</code>, <code>pattern</code>是<code>\Qhttp://localhost:[\E.*\Q]\E</code>，后者是<code>2.5.5</code>, <code>pattern</code>是<code>\Qhttp://localhost\E(:\d+)?</code>.</p><p>所以，这就能看出为啥<code>2.4.5</code>通不过验证了，谁家<code>origin</code>还能带<code>[</code>和<code>]</code>啊~</p><p>原因找到了，但是这个<code>pattern</code>是怎么变成这副德行的呢？</p><p>我们接着找~</p><p>最后在<code>CorsConfiguration</code>类中发现了一切的开始：</p><p>其中<code>2.4.5</code>版本中对应的<code>spring-web</code>版本是<code>5.3.6</code>，而<code>2.5.5</code>版本中对应的<code>spring-web</code>版本是<code>5.3.10</code>。</p><p>前者在<code>CorsConfiguration</code>类中是这么处理我们传进去的字符串的：</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token function">OriginPattern</span><span class="token punctuation">(</span>String declaredPattern<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>declaredPattern <span class="token operator">=</span> declaredPattern<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>pattern <span class="token operator">=</span> <span class="token function">toPattern</span><span class="token punctuation">(</span>declaredPattern<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> Pattern <span class="token function">toPattern</span><span class="token punctuation">(</span>String patternValue<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            patternValue <span class="token operator">=</span> <span class="token string">"\\Q"</span> <span class="token operator">+</span> patternValue <span class="token operator">+</span> <span class="token string">"\\E"</span><span class="token punctuation">;</span>            patternValue <span class="token operator">=</span> patternValue<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token string">"\\E.*\\Q"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>patternValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以，他只是把<code>*</code>进行了替换。而后者则复杂一些：</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token function">OriginPattern</span><span class="token punctuation">(</span>String declaredPattern<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>declaredPattern <span class="token operator">=</span> declaredPattern<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>pattern <span class="token operator">=</span> <span class="token function">initPattern</span><span class="token punctuation">(</span>declaredPattern<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> Pattern <span class="token function">initPattern</span><span class="token punctuation">(</span>String patternValue<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            String portList <span class="token operator">=</span> null<span class="token punctuation">;</span>            Matcher matcher <span class="token operator">=</span> PORTS_PATTERN<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>patternValue<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                patternValue <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                portList <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            patternValue <span class="token operator">=</span> <span class="token string">"\\Q"</span> <span class="token operator">+</span> patternValue <span class="token operator">+</span> <span class="token string">"\\E"</span><span class="token punctuation">;</span>            patternValue <span class="token operator">=</span> patternValue<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token string">"\\E.*\\Q"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>portList <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                patternValue <span class="token operator">+=</span> <span class="token punctuation">(</span>portList<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"(:\\d+)?"</span> <span class="token operator">:</span> <span class="token string">":("</span> <span class="token operator">+</span> portList<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'|'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>patternValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以，一切明了了~ </p><h1 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h1><p>后来，我又翻了翻文档，才发现啊这事谁也怪不得，只能怪自己~</p><p>因为，<code>5.3.6</code>版本的<code>spring-framework</code>文档，在对应页面写的清清楚楚：</p><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token code keyword">`public CorsConfiguration setAllowedOriginPatterns(@Nullable List&lt;String> allowedOriginPatterns)`</span>Alternative to setAllowedOrigins(java.util.List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.lang.String</span><span class="token punctuation">></span></span>) that supports origins declared via wildcard patterns. In contrast to allowedOrigins which does support the special value "<span class="token italic"><span class="token punctuation">*</span>", this property allows more flexible patterns, e.g. "https://<span class="token punctuation">*</span></span>.domain1.com". Furthermore it always sets the Access-Control-Allow-Origin response header to the matched origin and never to "*", nor to any other pattern, and therefore can be used in combination with setAllowCredentials(java.lang.Boolean) set to true.By default this is not set.Since:5.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写的很明白，例子也举得很明白，而且写着 <strong>Since 5.3</strong> </p><p>于是我陷入了深深的自责当中。<br>但是，当我再次打开<code>5.3.10</code>版本的页面，发现，哎？他也是 <strong>Since 5.3</strong> 啊~</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/cors/CorsConfiguration.html#setAllowedOriginPatterns-java.util.List-">spring-framework-current</a><br><a href="https://docs.spring.io/spring-framework/docs/5.3.10/javadoc-api/org/springframework/web/cors/CorsConfiguration.html#setAllowedOriginPatterns-java.util.List-">spring-framework-5.3.10</a><br><a href="https://docs.spring.io/spring-framework/docs/5.3.6/javadoc-api/org/springframework/web/cors/CorsConfiguration.html#setAllowedOriginPatterns-java.util.List-">spring-framework-5.3.6</a></p>]]></content>
      
      
      <categories>
          
          <category> 遇到的问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebSocket </tag>
            
            <tag> Stomp </tag>
            
            <tag> CORS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零零碎碎的知识点</title>
      <link href="/2021/07/15/ling-ling-sui-sui-de-zhi-shi-dian/"/>
      <url>/2021/07/15/ling-ling-sui-sui-de-zhi-shi-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="Atomic-Access-和-volatile关键字"><a href="#Atomic-Access-和-volatile关键字" class="headerlink" title="Atomic Access 和 volatile关键字"></a>Atomic Access 和 volatile关键字</h1><p>对声明了volatile关键字的所有变量（包括long和double类型的变量）的读，写操作都是原子的。<br><code>Reads and writes are atomic for all variables declared volatile (including long and double variables).</code></p><p><a href="https://docs.oracle.com/javase/tutorial/essential/concurrency/atomic.html">oracle的jdk8文档</a></p><h1 id="ls-l结果中出现-符号"><a href="#ls-l结果中出现-符号" class="headerlink" title="ls -l结果中出现@符号"></a>ls -l结果中出现@符号</h1><p>@符号表示该文件有扩展属性，可以通过<code>xattr</code>来查看。<br>比如：</p><p><img src="./1.png"></p><p><img src="./2.png"></p><p>这些扩展属性，可能对程序的运行产生一些影响。比如<code>com.apple.quarantine</code>，对于刚刚下载下来的程序第一次运行，他会要求用户确认以反之恶意软件。<br>这些属性可以通过<code>xattr -d attribute filename</code>来移除。</p><p>如：</p><p><img src="./3.png"></p><p>移除后，可以看到gogs就不带有@符号。</p><h1 id="Q-E"><a href="#Q-E" class="headerlink" title="\Q + \E"></a>\Q + \E</h1><p>在正则表达式中，使用<code>\Q</code>开始，<code>\E</code>结束，可使中间的标点符号失去特殊意义，将中间的字符作为普通字符。<br>如<code>\Qhttp://localhost:[\E.*\Q]\E</code>，表示<code>http://localhost:[</code>这一截和<code>]</code>都是普通字符。</p><h1 id="关于多module的工程"><a href="#关于多module的工程" class="headerlink" title="关于多module的工程"></a>关于多module的工程</h1><p>如果其中一个module要依赖另一个module，那么务必在工程的根目录先执行安装，即<code>mvn install</code>。<br>否则将会出现<code> Failed to read artifact descriptor for xxx;</code>以及<code>Could not find artifact xxx</code>等错误。</p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零零碎碎的历史和概念</title>
      <link href="/2021/07/09/ling-ling-sui-sui-de-li-shi-he-gai-nian/"/>
      <url>/2021/07/09/ling-ling-sui-sui-de-li-shi-he-gai-nian/</url>
      
        <content type="html"><![CDATA[<p>在看各种代码和文档的时候，老是会遇见各种不太认识的词汇，也不懂到底是啥，也不懂到底是从哪里来的，有什么意义。<br>但是计算机作为一个完全由人类从零创造的东西，知其然，知其所以然，还有很有意义的。<br>这里简单总结一下各个概念和相关的一些历史。<br>（本人水平有限，有不对的或者理解不对的地方，请大家见谅~ ）</p><h1 id="Unix"><a href="#Unix" class="headerlink" title="Unix"></a>Unix</h1><h2 id="Multics"><a href="#Multics" class="headerlink" title="Multics"></a>Multics</h2><p>1965年，美国麻省理工大学（MIT），通用电气公司（GE）和AT&amp;T（American Telephone and Telegraph）的贝尔实验室一起开发了一个系统，那就是Multics（MULTiplexed Information and Computing System）。<br>其中有两个人很重要，分别是肯·汤普逊和丹尼斯·里奇。其中，肯·汤普逊还在Multics上开发了一个小游戏——Star Travel。<br>但是因为种种原因吧，贝尔实验室退出了，这个项目应该是没有彻底完成，就结束了。</p><h2 id="Unix-1"><a href="#Unix-1" class="headerlink" title="Unix"></a>Unix</h2><p>上面提到一个Star Travel的游戏，他的作者肯·汤普逊也许是为了能够继续玩他的游戏，所以就喊来了丹尼斯·里奇又写了一个新的系统，也就是Unix，但是当时还是叫Unics，毕竟是从Multics这里来的。<br>哦，对了，这两位大哥还是B语言和C语言的作者。刚开始Unix就是用B语言写的，后来写出了C语言之后，在1973年，他们又用C语言重新实现了一遍Unix。<br>因为这个Unix，这哥俩还获得了图灵奖。不过确实也是太强了，不说Unix，单说C语言也是够强。</p><h2 id="System-V-和-BSD"><a href="#System-V-和-BSD" class="headerlink" title="System V 和 BSD"></a>System V 和 BSD</h2><p>System V和BSD(Berkeley Software Distribution)其实是Unix的两个分支，前者就是由AT&amp;T的贝尔实验室推出的，后者如其名，是加州大学伯克利分校搞得。<br>像是IBM的AIX，惠普的HP-UX都是System V风格的Unix，Sun的Solaris前期是BSD风格，后来也奔向了System V。<br>而像美国DEC公司的Ultrix，惠普的Tru64 UNIX都是BSD风格的。Mac OS的前身NeXTSTEP也是BSD风格的Unix系统。</p><h2 id="类Unix"><a href="#类Unix" class="headerlink" title="类Unix"></a>类Unix</h2><p>这里摘一段wiki的描述：<br><code>类Unix系统（英语：Unix-like；经常被称为UN*X或*nix）指各种Unix的派生系统，比如FreeBSD、OpenBSD、SUN的Solaris，以及各种与传统Unix类似的系统，例如Minix、Linux、QNX等。它们虽然有的是自由软件，有的是私有软件，但都相当程度地继承了原始UNIX的特性，有许多相似处，并且都在一定程度上遵守POSIX规范。 UNIX的商标权由国际开放标准组织所拥有，只有符合单一UNIX规范的UNIX系统才能使用UNIX这个名称，否则只能称为类UNIX（UNIX-like）。</code><br>然后百度百科是这么说的：<br><code>由于UNIX标准认定价格昂贵，所以唯一获得UNIX标准认定的为苹果的MACOS系统。</code><br>所以，我理解的，就是把Unix和类Unix当成一类东西就好了。</p><h1 id="GNU"><a href="#GNU" class="headerlink" title="GNU"></a>GNU</h1><p>GNU并不是一个具体的系统或者软件，他是一个计划。<br>Unix系统诞生之后，逐渐变得繁荣，各个厂商开始为Unix系统开发软件，并推出了他们自己的Unix版本，比如AIX，Solaris等等。但是这些系统只能运行在大型计算机上面，而且价格非常贵。小公司以及个人基本不太可能用得起。为了对抗这些垄断，自由主义者理查德·斯托曼登上了历史舞台，他觉得“在自由的时代，用户应该免费享有对软件源码阅读和修改的权利”，所以他提出了GNU计划。<br>至于为啥叫GNU，其实他是“GNU is Not Unix”的缩写。他的目的就是开发出一套包括操作系统内核、SHELL、各种应用软件等，一整套完整的软件系统来代替Unix。</p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>说到Linux，这里要先提一下Minix。百度百科的描述：<br><code>20世纪80年代，由于AT&amp;T所有的UNIX版权的限制，荷兰的Andrew S. Tanenbaum教授决定写一个不包含任何AT&amp;T源代码的UNIX系统，名为MINIX（即小型的UNIX），并开放全部源代码给大学教学和研究工作，Minix于2000年重新改为BSD授权，成为自由和开放源码软件，为全球注册商标。</code><br>再之后呢，芬兰人李纳斯•托瓦兹（Linus Torvalds）在赫尔辛基大学读书时使用了Minix系统，他可能是觉得这个系统用起来不太顺手，于是他也像自己写一个操作系统（大神就是大神，想干啥就能干啥）。于是，在1991年的9月他就完成了Linux的第一个版本。<br>然后，李纳斯他也是GNU计划的支持者，所以他贡献了Linux内核的全部代码，所以Linux也称GNU/Linux，同时他的贡献也算是补全了GNU计划。</p><h1 id="POSIX"><a href="#POSIX" class="headerlink" title="POSIX"></a>POSIX</h1><p>POSIX他是一个一直在发展的协议和标准，我们来看wiki怎么说的：<br><code>可移植操作系统接口（英语：Portable Operating System Interface，缩写为POSIX）是IEEE为要在各种UNIX操作系统上运行软件，而定义API的一系列互相关联的标准的总称，其正式称呼为IEEE Std 1003，而国际标准名称为ISO/IEC 9945。此标准源于一个大约开始于1985年的项目。POSIX这个名称是由理查德·斯托曼（RMS）应IEEE的要求而提议的一个易于记忆的名称。它基本上是Portable Operating System Interface（可移植操作系统接口）的缩写，而X则表明其对Unix API的传承。 Linux基本上逐步实现了POSIX兼容，但并没有参加正式的POSIX认证。 微软的Windows NT声称部分实现了POSIX标准。</code><br>简单的理解一下，POSIX是干啥的呢？我们知道操作系统有多个分支，为了保证源代码层面的可移植，所以制定了这么一个标准。这样同样的一份代码，在不同的操作系统上编译出来的结果是一致的。</p><h2 id="ISO-C"><a href="#ISO-C" class="headerlink" title="ISO C"></a>ISO C</h2><p>这个东西其实也是一个标准，保证在各个平台上使用各个编译器对同一份源码能编译出相同的结果。<br>ISO C是从ANSI C继承而来，也可以叫Standard C，其实可以理解为是一样的东西，就是C的标准。<br>但是既然把他归类到POSIX下，那就肯定是跟POSIX有点关系呀~<br>ISO C其实是POSIX的一个子集，除此之外，它还包含各种系统服务接口，如socket等。但是ISO C还是领先于POSIX的，很多C的新标准并没有进入POSIX中，比如线程相关部分。<br>C中还有一个Posix库，他就是基于POSIX标准定义的一套头文件实现的lib库。</p><h1 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h1><h2 id="Wire-Protocol"><a href="#Wire-Protocol" class="headerlink" title="Wire Protocol"></a>Wire Protocol</h2><p>Wire Protocol更多的是表达传输格式。<br>因为代码层面的数据（链表、队列、二叉树）都是结构化的，但网络层看到的都是二进制流.<br>所以把结构化的数据序列化为二进制流发送出去，并且对方也能以同样的格式反序列化出来，这就是wire protocol。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/liang19890820/article/details/51824629">Unix 发展史</a><br><a href="https://www.cnblogs.com/jfzhu/p/12895692.html">Linux，Unix，GNU 到底有什么样的渊源？</a><br><a href="https://zhuanlan.zhihu.com/p/78080748">POSIX 是什么？让我们听听 Richard Stallman 的诠释</a><br><a href="https://zh.wikipedia.org/wiki/%E5%8F%AF%E7%A7%BB%E6%A4%8D%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8E%A5%E5%8F%A3">可移植操作系统接口</a><br><a href="https://zh.wikipedia.org/wiki/UNIX_System_V">UNIX System V</a><br><a href="https://en.wikipedia.org/wiki/Berkeley_Software_Distribution">Berkeley Software Distribution</a><br><a href="https://zh.wikipedia.org/wiki/BSD">BSD</a><br><a href="https://segmentfault.com/a/1190000012461553">聊聊我理解的ANSI C、ISO C、GNU C、POSIX C</a><br><a href="https://stackoverflow.com/questions/9376837/difference-between-c-standard-library-and-c-posix-library">Difference between C standard library and C POSIX library</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 历史 </tag>
            
            <tag> 概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优秀教程收集</title>
      <link href="/2020/12/14/you-xiu-jiao-cheng-shou-ji/"/>
      <url>/2020/12/14/you-xiu-jiao-cheng-shou-ji/</url>
      
        <content type="html"><![CDATA[<p><a href="https://wangdoc.com/bash/">阮一峰 Bash 脚本教程</a><br><a href="https://wangdoc.com/ssh/">阮一峰 SSH 教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7.8 NFS安装配置</title>
      <link href="/2020/10/22/centos7-8-nfs-an-zhuang-pei-zhi/"/>
      <url>/2020/10/22/centos7-8-nfs-an-zhuang-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="Server端"><a href="#Server端" class="headerlink" title="Server端"></a>Server端</h1><pre><code>sudo yum install nfs-utils</code></pre><pre><code>sudo systemctl enable rpcbind  sudo systemctl enable nfs</code></pre><pre><code>sudo systemctl start rpcbindsudo systemctl start nfs</code></pre><pre><code>sudo mkdir /datasudo chmod 755 /data</code></pre><pre><code>sudo vim /etc/exportssudo systemctl restart nfs</code></pre><h1 id="Client端"><a href="#Client端" class="headerlink" title="Client端"></a>Client端</h1><pre><code>sudo yum install nfs-utils</code></pre><pre><code>sudo systemctl enable rpcbindsudo systemctl start rpcbind</code></pre><pre><code>sudo mkdir /datasudo mount -t nfs 192.168.0.101:/data /data</code></pre><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><p>执行<code>sudo systemctl enable rpcbind</code>或<code>sudo systemctl start rpcbind</code>时，也许会出现下面的问题：<br><code>Failed to execute operation: Cannot send after transport endpoint shutdown</code>或<code>Failed to start rpcbind.service: Unit is masked.</code><br>执行: <code>sudo systemctl unmask rpcbind.service</code>即可</p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos7 </tag>
            
            <tag> nfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于RedisTemplate的ERR EXEC without MULTI错误</title>
      <link href="/2020/09/07/guan-yu-redistemplate-de-errexecwithoutmulti-cuo-wu/"/>
      <url>/2020/09/07/guan-yu-redistemplate-de-errexecwithoutmulti-cuo-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在看[Redis in Action]这本书的时候，官方虽然提供了<code>java</code>代码，但是他是用<code>jedis</code>实现的。本着练手和学习的目的打算在<code>spring boot</code>中使用<code>spring-boot-starter-data-redis</code>重新写一遍。然而在进行到第四章讲到<code>multi</code>和<code>exec</code>的时候就出现了问题，举个简单的例子：</p><pre class="line-numbers language-java"><code class="language-java">redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"joker"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"27"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>redisTemplate<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">"joker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>redisTemplate<span class="token punctuation">.</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"joker"</span><span class="token punctuation">,</span> <span class="token string">"pet"</span><span class="token punctuation">,</span> <span class="token string">"beibei"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>redisTemplate<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行这段代码，程序就会给出<code>Caused by: org.springframework.data.redis.RedisSystemException: Error in execution; nested exception is io.lettuce.core.RedisCommandExecutionException: ERR EXEC without MULTI</code>错误，但是我明明执行<code>multi()</code>了呀~ </p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>遇到问题，第一部当然是去问<code>google</code>，但是现在搜出来的结果很多都是抄的，而且很多抄的还是驴唇不对马嘴~<br>也不知道咋回事，我记得以前<code>google</code>的搜索结果不是这样的~</p><p>我们一层一层的剥开，可以找到这么一个干实事的函数：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Executes the given action object within a connection that can be exposed or not. Additionally, the connection can     * be pipelined. Note the results of the pipeline are discarded (making it suitable for write-only scenarios).     *     * @param &lt;T> return type     * @param action callback object to execute     * @param exposeConnection whether to enforce exposure of the native Redis Connection to callback code     * @param pipeline whether to pipeline or not the connection for the execution     * @return object returned by the action     */</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">execute</span><span class="token punctuation">(</span>RedisCallback<span class="token operator">&lt;</span>T<span class="token operator">></span> action<span class="token punctuation">,</span> <span class="token keyword">boolean</span> exposeConnection<span class="token punctuation">,</span> <span class="token keyword">boolean</span> pipeline<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>initialized<span class="token punctuation">,</span> <span class="token string">"template not initialized; call afterPropertiesSet() before using it"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token string">"Callback object must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RedisConnectionFactory factory <span class="token operator">=</span> <span class="token function">getRequiredConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RedisConnection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 1</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>enableTransactionSupport<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// only bind resources in case of potential transaction synchronization</span>                conn <span class="token operator">=</span> RedisConnectionUtils<span class="token punctuation">.</span><span class="token function">bindConnection</span><span class="token punctuation">(</span>factory<span class="token punctuation">,</span> enableTransactionSupport<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                conn <span class="token operator">=</span> RedisConnectionUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> existingConnection <span class="token operator">=</span> TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">hasResource</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>            RedisConnection connToUse <span class="token operator">=</span> <span class="token function">preProcessConnection</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> existingConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> pipelineStatus <span class="token operator">=</span> connToUse<span class="token punctuation">.</span><span class="token function">isPipelined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pipeline <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>pipelineStatus<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                connToUse<span class="token punctuation">.</span><span class="token function">openPipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            RedisConnection connToExpose <span class="token operator">=</span> <span class="token punctuation">(</span>exposeConnection <span class="token operator">?</span> connToUse <span class="token operator">:</span> <span class="token function">createRedisConnectionProxy</span><span class="token punctuation">(</span>connToUse<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            T result <span class="token operator">=</span> action<span class="token punctuation">.</span><span class="token function">doInRedis</span><span class="token punctuation">(</span>connToExpose<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// close pipeline</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pipeline <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>pipelineStatus<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                connToUse<span class="token punctuation">.</span><span class="token function">closePipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// TODO: any other connection processing?</span>            <span class="token keyword">return</span> <span class="token function">postProcessResult</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> connToUse<span class="token punctuation">,</span> existingConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            RedisConnectionUtils<span class="token punctuation">.</span><span class="token function">releaseConnection</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> factory<span class="token punctuation">,</span> enableTransactionSupport<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在代码<code>1</code>处，可以看到有<code>enableTransactionSupport</code>这么一个参数，看一下他的值是<code>false</code>的话，那么会重新拿一个连接(而且他的默认值还就是<code>false</code>)，这也就解释了为啥我们明明执行<code>multi</code>了，但是还没说我们在<code>exec</code>前没有<code>multi</code>~<br>但是，如果<code>enableTransactionSupport</code>的值是<code>true</code>呢，他又干了啥呢？我们一路点进去，找到了这么一个函数：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Gets a Redis connection. Is aware of and will return any existing corresponding connections bound to the current     * thread, for example when using a transaction manager. Will create a new Connection otherwise, if     * &amp;#123;@code allowCreate&amp;#125; is &lt;tt>true&lt;/tt>.     *     * @param factory connection factory for creating the connection.     * @param allowCreate whether a new (unbound) connection should be created when no connection can be found for the     *          current thread.     * @param bind binds the connection to the thread, in case one was created-     * @param transactionSupport whether transaction support is enabled.     * @return an active Redis connection.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> RedisConnection <span class="token function">doGetConnection</span><span class="token punctuation">(</span>RedisConnectionFactory factory<span class="token punctuation">,</span> <span class="token keyword">boolean</span> allowCreate<span class="token punctuation">,</span> <span class="token keyword">boolean</span> bind<span class="token punctuation">,</span>            <span class="token keyword">boolean</span> transactionSupport<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>factory<span class="token punctuation">,</span> <span class="token string">"No RedisConnectionFactory specified"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1</span>        RedisConnectionHolder connHolder <span class="token operator">=</span> <span class="token punctuation">(</span>RedisConnectionHolder<span class="token punctuation">)</span> TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>connHolder <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>transactionSupport<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">potentiallyRegisterTransactionSynchronisation</span><span class="token punctuation">(</span>connHolder<span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> connHolder<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>allowCreate<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"No connection found and allowCreate = false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Opening RedisConnection"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        RedisConnection conn <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bind<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            RedisConnection connectionToBind <span class="token operator">=</span> conn<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>transactionSupport <span class="token operator">&amp;&amp;</span> <span class="token function">isActualNonReadonlyTransactionActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                connectionToBind <span class="token operator">=</span> <span class="token function">createConnectionProxy</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            connHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisConnectionHolder</span><span class="token punctuation">(</span>connectionToBind<span class="token punctuation">)</span><span class="token punctuation">;</span>             TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">bindResource</span><span class="token punctuation">(</span>factory<span class="token punctuation">,</span> connHolder<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 5</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>transactionSupport<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                 <span class="token function">potentiallyRegisterTransactionSynchronisation</span><span class="token punctuation">(</span>connHolder<span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> connHolder<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 8</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> conn<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ol><li>这里有一个新的东西：<code>TransactionSynchronizationManager</code>，这是由<code>spring</code>提供的，他里面有一个叫<code>resources</code>的成员，他是一个<code>ThreadLocal</code>。所以这一行代码，就很清楚了，他是去拿到跟当前线程绑定的连接。</li><li>这里就是判断啊，当前线程是否绑定了这么一个连接。</li><li>如果拿到了跟当前线程绑定的连接，且<code>enableTransactionSupport</code>的值是<code>true</code>，那么需要做一些操作~ 不过这些操作是同<code>spring</code>的事务相关的，在我们的代码中，不会执行~</li><li>但是，我们第一次执行啊，好像没有给当前线程绑定过连接，所以上一步是执行不到的~ 这里创建一个连接~</li><li>然后，在这里，我们把当前线程和连接绑定起来~</li></ol><p>所以，综上，为啥我们的代码不对呢，因为<code>RedisTemplate</code>默认是不开启事务支持的，而且在执行<code>exec</code>方法时，会重新创建一个连接对象(或者从当前线程的<code>ThreadLocal</code>中拿到上一次绑定的连接)。所以，我们在不开启事务的情况下，自己在外面执行的<code>multi</code>方法时完全不会生效的(因为连接对象都换了)~</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>看到这，原因既然已经知道了，那么自然就迎刃而解了~<br>最简单的方式，既然默认是不开启事务支持的，那么我们手动把他打开不就好了~<br>执行: <code>redisTemplate.setEnableTransactionSupport(true);</code>即可~</p><p>可能有些地方描述的不是很清楚，我们还是拿我们的例子来说，还是上面那段代码：</p><pre class="line-numbers language-java"><code class="language-java">redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"joker"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"27"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>redisTemplate<span class="token punctuation">.</span><span class="token function">setEnableTransactionSupport</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>redisTemplate<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">"joker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>redisTemplate<span class="token punctuation">.</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"joker"</span><span class="token punctuation">,</span> <span class="token string">"pet"</span><span class="token punctuation">,</span> <span class="token string">"beibei"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span>redisTemplate<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ol><li>初始化一条数据~</li><li>开始事务支持</li><li><code>watch</code>一个<code>key</code>，同时在这一步执行时，会创建一个新的连接并与当前线程绑定~</li><li>执行<code>multi</code>，这里会拿到上一步与当前线程绑定的连接，并通过该连接调用<code>multi</code>方法~</li><li>再加一条数据~</li><li>执行<code>exec</code>方法，同样是拿到与线程绑定的连接后，通过该连接执行<code>exec</code>方法~ 因为该连接已经执行了<code>watch</code>和<code>multi</code>，所以在此之前，对应的<code>key</code>如果发生变化，那么，不会执行成功，我们的目的也就达到了~</li></ol><p>不过，这种方法还有一个问题，大家可以顺着源代码继续往下捋~ 会发现，与当前线程绑定的连接不会解绑，更不会被<code>close</code>~<br>所以，感觉<code>RedisTemplate</code>提供的<code>SessionCallback</code>才是正解~</p><pre class="line-numbers language-java"><code class="language-java">redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SessionCallback</span><span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Object<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">execute</span><span class="token punctuation">(</span>RedisOperations operations<span class="token punctuation">)</span> <span class="token keyword">throws</span> DataAccessException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        operations<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">"joker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        operations<span class="token punctuation">.</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        operations<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"joker"</span><span class="token punctuation">,</span> <span class="token string">"pet"</span><span class="token punctuation">,</span> <span class="token string">"beibei"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> operations<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>RedisTemplate</code>的<code>public &lt;T&gt; T execute(SessionCallback&lt;T&gt; session)</code>方法，会在<code>finally</code>中调用<code>RedisConnectionUtils.unbindConnection(factory);</code>来解除执行过程中与当前线程绑定的连接，并在随后关闭连接。</p>]]></content>
      
      
      <categories>
          
          <category> 遇到的问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> issue </tag>
            
            <tag> RedisTemplate </tag>
            
            <tag> ERR EXEC without MULTI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些数据类型转换的整理</title>
      <link href="/2020/09/01/yi-xie-shu-ju-lei-xing-zhuan-huan-de-zheng-li/"/>
      <url>/2020/09/01/yi-xie-shu-ju-lei-xing-zhuan-huan-de-zheng-li/</url>
      
        <content type="html"><![CDATA[<h1 id="数组-和-流"><a href="#数组-和-流" class="headerlink" title="数组 和 流"></a>数组 和 流</h1><h2 id="原始类型数组-to-Stream"><a href="#原始类型数组-to-Stream" class="headerlink" title="原始类型数组 to Stream"></a>原始类型数组 to Stream</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// int/long/double</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span> <span class="token punctuation">,</span><span class="token number">2</span> <span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> integerStream <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>ints<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// char</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>Stream<span class="token operator">&lt;</span>Character<span class="token operator">></span> characterStream <span class="token operator">=</span> IntStream<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToObj</span><span class="token punctuation">(</span>i <span class="token operator">-</span><span class="token operator">></span> chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果是String</span>String str <span class="token operator">=</span> <span class="token string">"12345678"</span><span class="token punctuation">;</span>Stream<span class="token operator">&lt;</span>Character<span class="token operator">></span> characterStream <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToObj</span><span class="token punctuation">(</span>c <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 类型转换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashMap的一些笔记</title>
      <link href="/2020/08/17/hashmap-de-yi-xie-bi-ji/"/>
      <url>/2020/08/17/hashmap-de-yi-xie-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><ul><li>元素(entry): 具体存储数据的东西</li><li>桶(bucket): 存放元素的容器，可以是单个元素，可以是一个链表或者树</li><li>容量(capacity): 可以放多少个桶</li><li>负载因子(Load factor): 当元素的个数大于容量*负载因子(默认.75)，那么需要扩容</li><li>树化因子(<code>TREEIFY_THRESHOLD</code>): 当一个桶中的元素超过这个阈值时，会把链表转为红黑树；反过来还有一个反树化因子(<code>UNTREEIFY_THRESHOLD</code>)，当桶中的元素少于这个阈值时，会把树转为链表</li></ul><blockquote><p>以上，其实应该没有中文名，我这为了叫着方便~ 如果不合适，请忍耐~ 毕竟中文才是最博大精深的语言~ 没有之一，不接受反驳~</p></blockquote><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p><code>HashMap</code>一共提供了三个构造函数，区别主要在于是否要设定容量和阈值～<br>源码如下：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Constructs an empty &lt;tt>HashMap&lt;/tt> with the specified initial     * capacity and load factor.     *     * @param  initialCapacity the initial capacity     * @param  loadFactor      the load factor     * @throws IllegalArgumentException if the initial capacity is negative     *         or the load factor is nonpositive     */</span>    <span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal initial capacity: "</span> <span class="token operator">+</span>                                               initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">></span> MAXIMUM_CAPACITY<span class="token punctuation">)</span>            initialCapacity <span class="token operator">=</span> MAXIMUM_CAPACITY<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>loadFactor <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> Float<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>loadFactor<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal load factor: "</span> <span class="token operator">+</span>                                               loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> loadFactor<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>threshold <span class="token operator">=</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Constructs an empty &lt;tt>HashMap&lt;/tt> with the specified initial     * capacity and the default load factor (0.75).     *     * @param  initialCapacity the initial capacity.     * @throws IllegalArgumentException if the initial capacity is negative.     */</span>    <span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Constructs an empty &lt;tt>HashMap&lt;/tt> with the default initial capacity     * (16) and the default load factor (0.75).     */</span>    <span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// all other fields defaulted</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**     * Returns a power of two size for the given target capacity.     */</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> cap<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> cap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span>        n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">2</span><span class="token punctuation">;</span>        n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">4</span><span class="token punctuation">;</span>        n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">8</span><span class="token punctuation">;</span>        n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token operator">?</span> MAXIMUM_CAPACITY <span class="token operator">:</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ol><li>带有两个参数的构造函数，可以指定容量和负载因子。</li><li>这个函数的作用是把容量修改到大于等于容量的最小的2的幂，见5</li><li>单参数构造函数，传入容量，使用默认的负载因子(.75)</li><li>无参构造函数，容量和负载因子均使用默认值(16, .75)</li><li>找到大于等于容量的最小的2的幂，为啥要把容量设定为2的幂数呢，见下文~</li></ol><h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><p>先来看一下源码～</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Computes key.hashCode() and spreads (XORs) higher bits of hash     * to lower.  Because the table uses power-of-two masking, sets of     * hashes that vary only in bits above the current mask will     * always collide. (Among known examples are sets of Float keys     * holding consecutive whole numbers in small tables.)  So we     * apply a transform that spreads the impact of higher bits     * downward. There is a tradeoff between speed, utility, and     * quality of bit-spreading. Because many common sets of hashes     * are already reasonably distributed (so don't benefit from     * spreading), and because we use trees to handle large sets of     * collisions in bins, we just XOR some shifted bits in the     * cheapest possible way to reduce systematic lossage, as well as     * to incorporate impact of the highest bits that would otherwise     * never be used in index calculations because of table bounds.     */</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> h<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>hashCode()</code>返回一个<code>int</code>型数据，然后这里是将这个<code>hashCode</code>的高16位和低16位进行了一个异或运算～<br>据说，这是一个可以在一定程度上减少冲突，并且运算简单的好方法～ 又便宜又好吃～<br>在下面，我们会看见<code>index</code>的计算方式: <code>(n-1) &amp; hash</code>。<br><code>n</code>是当前的容量，那么如果当这个n比较小的时候，相当于只有<code>hashCode</code>低位参与了运算，而通过现在的<code>hash</code>函数，相当于把高位也引入到了计算当中～</p><h2 id="put"><a href="#put" class="headerlink" title="put"></a>put</h2><p>重头戏来了，这应该是我们最关心的方法，还是先上代码～</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * Associates the specified value with the specified key in this map.     * If the map previously contained a mapping for the key, the old     * value is replaced.     *     * @param key key with which the specified value is to be associated     * @param value value to be associated with the specified key     * @return the previous value associated with &lt;tt>key&lt;/tt>, or     *         &lt;tt>null&lt;/tt> if there was no mapping for &lt;tt>key&lt;/tt>.     *         (A &lt;tt>null&lt;/tt> return can also indicate that the map     *         previously associated &lt;tt>null&lt;/tt> with &lt;tt>key&lt;/tt>.)     */</span>    <span class="token keyword">public</span> V <span class="token function">put</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>        <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Implements Map.put and related methods.     *     * @param hash hash for key     * @param key the key     * @param value the value to put     * @param onlyIfAbsent if true, don't change existing value     * @param evict if false, the table is in creation mode.     * @return previous value, or null if none     */</span>    <span class="token keyword">final</span> V <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span>                   <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span>            n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3</span>            tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4</span>            Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span> K k<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 5</span>                e <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 6</span>                e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 7</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">>=</span> TREEIFY_THRESHOLD <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// -1 for 1st</span>                            <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 8</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                        <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    p <span class="token operator">=</span> e<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// existing mapping for key // 9</span>                V oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent <span class="token operator">||</span> oldValue <span class="token operator">==</span> null<span class="token punctuation">)</span>                    e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>                <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">++</span>modCount<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">></span> threshold<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 10 </span>            <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span>evict<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ol><li><code>put</code>方法，先计算<code>key</code>的<code>hash</code>值，然后调用<code>putVal</code>方法。</li><li>初始化<code>table</code>，在构造函数中，仅仅是指定了容量和负载因子，并没有初始化容器。</li><li>这里是，如果对应的索引位置没有元素，那么直接把新元素放到这里。同时可以看到，计算索引的方式是<code>(n - 1) &amp; hash</code>，而不是取余之类的。</li><li>如果对应的索引位置，已经有元素了，那么执行下面的逻辑。</li><li>如果索引位置的当前元素<code>p</code>的<code>key</code>和新元素一样，那么用<code>e</code>指向这个元素(也就是我们要<code>put</code>进去的<code>key</code>，其实已经存在了)。</li><li>当前元素<code>p</code>的<code>key</code>和新元素不一样，同时<code>p</code>又是一个树节点，那么就要调用<code>putTreeVal</code>方法；同时，如果这棵树中，已经包含了新元素的<code>key</code>，那么用<code>e</code>指向他。</li><li>同上，不过这个不是树，而是链表的情况。</li><li>如果，链表的长度超过树化阈值(<code>TREEIFY_THRESHOLD</code>)，那么就要把链表转化为红黑树</li><li>这里检查一下<code>e</code>，他表示的意思是，是否<code>map</code>中已经存在<code>key</code>对应的元素了。这里要根据<code>onlyIfAbsent</code>参数来决定是否用新元素替换老元素。</li><li>如果元素的数量超过了阈值(<code>threshold</code>)，那么需要进行扩容(<code>resize</code>)。</li></ol><p>这里需要注意的是，我们在双参数版本的构造函数中将<code>threshold</code>赋值为容量了，但是在这里的<code>threshold</code>其实是容量*负载因子，这是咋回事呢？<br><code>table</code>的初始化是在第一次进行<code>put</code>操作时，调用<code>resize</code>方法完成的，而这个<code>threshold</code>的值，也是在<code>resize</code>方法中被重新赋值的。<br>详见下文～</p><h2 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h2><p><code>resize</code>这个方法，有两个作用～<br>第一个就是初始化<code>table</code>时需要，另一个就是扩容的时候需要～<br>每次扩容后的容量都会变成之前的二倍～<br>扩容实际上是创建了一个新的<code>table</code>，然后还需要把数据迁移过来～<br>源码如下：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Initializes or doubles table size.  If null, allocates in     * accord with initial capacity target held in field threshold.     * Otherwise, because we are using power-of-two expansion, the     * elements from each bin must either stay at same index, or move     * with a power of two offset in the new table.     *     * @return the table     */</span>    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldTab <span class="token operator">=</span> table<span class="token punctuation">;</span>        <span class="token keyword">int</span> oldCap <span class="token operator">=</span> <span class="token punctuation">(</span>oldTab <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> oldTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> oldThr <span class="token operator">=</span> threshold<span class="token punctuation">;</span>        <span class="token keyword">int</span> newCap<span class="token punctuation">,</span> newThr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">>=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>                threshold <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>                <span class="token keyword">return</span> oldTab<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>newCap <span class="token operator">=</span> oldCap <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span>                     oldCap <span class="token operator">>=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3</span>                newThr <span class="token operator">=</span> oldThr <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// double threshold</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldThr <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// initial capacity was placed in threshold // 4</span>            newCap <span class="token operator">=</span> oldThr<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// zero initial threshold signifies using defaults // 5</span>            newCap <span class="token operator">=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">;</span>            newThr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>DEFAULT_LOAD_FACTOR <span class="token operator">*</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newThr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 6</span>            <span class="token keyword">float</span> ft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>newCap <span class="token operator">*</span> loadFactor<span class="token punctuation">;</span>            newThr <span class="token operator">=</span> <span class="token punctuation">(</span>newCap <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span> ft <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>MAXIMUM_CAPACITY <span class="token operator">?</span>                      <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ft <span class="token operator">:</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        threshold <span class="token operator">=</span> newThr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 7</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"rawtypes"</span><span class="token punctuation">,</span><span class="token string">"unchecked"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTab <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>newCap<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 8</span>        table <span class="token operator">=</span> newTab<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldTab <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> oldCap<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 9</span>                Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 10</span>                        newTab<span class="token punctuation">[</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>newCap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 11</span>                        <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newTab<span class="token punctuation">,</span> j<span class="token punctuation">,</span> oldCap<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// preserve order // 12</span>                        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> loHead <span class="token operator">=</span> null<span class="token punctuation">,</span> loTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> hiHead <span class="token operator">=</span> null<span class="token punctuation">,</span> hiTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">;</span>                        <span class="token keyword">do</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                            next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> oldCap<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">==</span> null<span class="token punctuation">)</span>                                    loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                                <span class="token keyword">else</span>                                    loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                                loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                            <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">==</span> null<span class="token punctuation">)</span>                                    hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                                <span class="token keyword">else</span>                                    hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                                hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                            loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                            newTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span>                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                            hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                            newTab<span class="token punctuation">[</span>j <span class="token operator">+</span> oldCap<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span>                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> newTab<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ol><li>这里是处理正常扩容的情况(非初始化)。</li><li>如果容量已经超过最大容量(<code>MAXIMUM_CAPACITY</code>)了，那就不能扩容了，并把扩容的阈值(<code>threshold</code>)设置为最大，即无法再触发<code>resize</code>方法。</li><li>正常扩容成原来的二倍，包括容量和阈值(<code>threshold</code>)，因为这个最大容量值(<code>MAXIMUM_CAPACITY</code>)为<code>1 &lt;&lt; 30</code>，所以这里并不会溢出。</li><li>这里是处理使用带参构造函数构造的情况。</li><li>这里是处理使用无参构造函数构造的情况，均使用默认值。</li><li>计算阈值(<code>threshold</code>)。</li><li>这里就是修改阈值(<code>threshold</code>)的地方，在构造函数中阈值等于容量，而在这里进行了重新赋值，赋值为容量*负载因子。</li><li>创建一个新的扩容后的<code>table</code>。</li><li>将数据从老<code>table</code>中转移到新<code>table</code>。</li><li>老<code>table</code>中对应位置的元素是普通元素，那么直接把它挪过去就好了。</li><li>如果原来的元素是一棵树，那么需要把树拆为两部分，原来索引的部分，和新索引的部分，如拆分后树的元素过少，还需要将树转为链表～</li><li>如果原来的元素是一个列表，那么也需要将他拆分为两部分，分别放在原来的索引，和新索引处。</li></ol><p>补充：关于转移数据时候的索引：<br>因为<code>HashMap</code>的容量，永远是2的幂数，而扩容也是扩容到原来的2倍，那么从二进制上来讲，加入原来的容量是<code>2</code>，那么就是<code>00000010</code>，扩容后就变成了<code>4</code>，也就是<code>00000100</code>。<br>那么，假如以前有两个<code>key</code>，分别是<code>1</code>，<code>5</code>，也就是<code>00000001</code>和<code>00000101</code>，他们两个的索引都是<code>1</code>，而扩容后，他们的索引分别是<code>1</code>和<code>5</code>。<br>其实，再举几个例子也是一样的，从老<code>table</code>到新<code>table</code>迁移数据的时候，只有两种情况，还在原索引位置，以及原索引位置+原容量。<br>仔细想想是不是这么一回事，因为扩容后，就是容量左移一位而已，再计算索引的时候，差别也仅仅是看新容量的高位与元素的高位进行与运算是否为<code>1</code>，差的正好也是原来的容量的值而已。<br>上面代码中，树也好，链表也好，其实都是根据这个原理来计算索引和迁移元素的。<br>(这也是在初始化时，会自动把容量转换为大于等于我们想要的容量的最小的2的幂所带来的一个很大的好处~)</p><h2 id="get"><a href="#get" class="headerlink" title="get"></a>get</h2><p><code>get</code>方法就很简单了，简单说就是计算<code>hash</code>值，然后去<code>table</code>里去取值～<br>源码如下：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Returns the value to which the specified key is mapped,     * or &amp;#123;@code null&amp;#125; if this map contains no mapping for the key.     *     * &lt;p>More formally, if this map contains a mapping from a key     * &amp;#123;@code k&amp;#125; to a value &amp;#123;@code v&amp;#125; such that &amp;#123;@code (key==null ? k==null :     * key.equals(k))&amp;#125;, then this method returns &amp;#123;@code v&amp;#125;; otherwise     * it returns &amp;#123;@code null&amp;#125;.  (There can be at most one such mapping.)     *     * &lt;p>A return value of &amp;#123;@code null&amp;#125; does not &lt;i>necessarily&lt;/i>     * indicate that the map contains no mapping for the key; it's also     * possible that the map explicitly maps the key to &amp;#123;@code null&amp;#125;.     * The &amp;#123;@link #containsKey containsKey&amp;#125; operation may be used to     * distinguish these two cases.     *     * @see #put(Object, Object)     */</span>    <span class="token keyword">public</span> V <span class="token function">get</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Implements Map.get and related methods.     *     * @param hash hash for key     * @param key the key     * @return the node, or null if none     */</span>    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> Object key<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> first<span class="token punctuation">,</span> e<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span> K k<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span>first <span class="token operator">=</span> tab<span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token comment" spellcheck="true">// always check first node // 2</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> first<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> first<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> first<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3</span>                    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>first<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTreeNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">do</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                        <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token keyword">return</span> e<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ol><li>计算<code>key</code>的<code>hash</code>，然后调用<code>getNode</code>方法。</li><li>计算索引并判断对应位置是否有元素，有的话那第一个元素(<code>first</code>)是不是我们要拿的元素(比较<code>key</code>)。</li><li>如果第一个元素(<code>first</code>)不对的话，分两种情况，如果第一个元素是树节点，那么就调用<code>getTreeNode</code>方法。</li><li>接上面，如果不是树节点，那就是链表，遍历链表找我们要的元素～</li></ol><h1 id="关于多线程"><a href="#关于多线程" class="headerlink" title="关于多线程"></a>关于多线程</h1><p><code>HashMap</code>不是线程安全的，所以在多线程下使用就会出现一些问题～ 比如死循环，比如元素丢失问题等～<br>(人家本来就不是线程安全的，非用它干啥呀？生活本该简简单单～ 简直就是没事找事～)</p><h2 id="死循环"><a href="#死循环" class="headerlink" title="死循环"></a>死循环</h2><p>这个问题好像是一个很经典的问题～不过仅限于1.8之前的版本～<br>1.8版本之后，把头插改为了尾插，就把这个问题解决了，但是，好像这个问题太经典了，老是出现在各个地方，无处可逃哇～</p><p>原因：<br>1.7版本的相关代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span>Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> newTable<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> src <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> newTable<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> src<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Entry e <span class="token operator">=</span> src<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            src<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">do</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                Entry next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span>next <span class="token operator">=</span> newTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                newTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>                e <span class="token operator">=</span> next<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>transfer</code>方法是在<code>resize</code>后调用的，作用是迁移数据~<br>我们可以看他这个链表部分，是在遍历过程中，给倒了个顺序(头插)~<br>所以，假设本来<code>table[1]</code>处的链表为<code>A -&gt; B -&gt; C</code>，那么正常<code>resize</code>后，会变成<code>C -&gt; B -&gt; A</code>(假设恰好没有元素的索引发生变化)。<br>但是在多线程的情况下，可能会同时触发<code>resize</code>方法~<br>那么假设有两个线程：<code>Thread1</code>和<code>Thread2</code>，以及一个HashMap，如下所示~</p><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token hr punctuation">-----</span>| 0 | -> 0| <span class="token title important">1 | -> 3 -> 7 -> 1<span class="token punctuation">-----</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这时触发了<code>resize</code>，则新的<code>table</code>应该长这样：</p><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token hr punctuation">-----</span>| 0 | -> 0| 1 | -> 1| 2 || <span class="token title important">3 | -> 7 -> 3<span class="token punctuation">-----</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然而，在执行过程中，当<code>Thread1</code>执行到<code>table[1] : 3 -&gt; null</code>，准备处理<code>7</code>结点时，没有抢占到CPU。<br>而这时<code>Thread2</code>抢到了，开始执行，并一直执行完成。<br>这时<code>Thread1</code>继续执行，因为<code>Thread2</code>已经执行完成，并且把最新的数据刷回主存了，所以<code>Thread1</code>会得到最新的结果。<br>当他执行到<code>table[1] : 3 -&gt; 7 -&gt; null</code>后，需要继续处理下一个结点，但是这个下一个结点本来是<code>null</code>，但是却变成了<code>3</code>。<br>这个时候，新<code>HashMap</code>就变成了这样：</p><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token hr punctuation">-----</span>| 0 | -> 0| 1 | -> 1| 2 || <span class="token title important">3 | -> 3 &lt;-> 7 <span class="token punctuation">-----</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而，这时，如果<code>get(3), get(7)</code>，还是不会发生任何问题，但是如果<code>get(11)</code>，那么就会现在<code>table[3]</code>这个环中，无法自拔。死循环就产生了~ </p><p>注：<br>虽然这也只是偶然现象，但是 好像有这么一句话：<em>任何在多线程下可能发生的错误场景最终一定会发生。</em></p><p>而在1.8以及之后的版本中，不管是处理红黑树，还是链表，都保证原来的顺序~ 就避免了这个问题~<br>源码如下：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                        <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newTab<span class="token punctuation">,</span> j<span class="token punctuation">,</span> oldCap<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>                    <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// preserve order</span>                        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> loHead <span class="token operator">=</span> null<span class="token punctuation">,</span> loTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> hiHead <span class="token operator">=</span> null<span class="token punctuation">,</span> hiTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">;</span>                        <span class="token keyword">do</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>                            next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> oldCap<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">==</span> null<span class="token punctuation">)</span>                                    loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                                <span class="token keyword">else</span>                                    loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                                loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                            <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">==</span> null<span class="token punctuation">)</span>                                    hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                                <span class="token keyword">else</span>                                    hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                                hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                            loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                            newTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span>                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                            hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                            newTab<span class="token punctuation">[</span>j <span class="token operator">+</span> oldCap<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span>                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ol><li>处理树的过程，见下面代码~</li><li>链表的处理过程，因为迁移时索引只有两种情况，还是原索引不变(低位)，原索引+原容量(高位)，所以代码中搞了两个链表，分别对应低位和高位，并保证了原来的顺序不变~</li></ol><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">/**         * Splits nodes in a tree bin into lower and upper tree bins,         * or untreeifies if now too small. Called only from resize;         * see above discussion about split bits and indices.         *         * @param map the map         * @param tab the table for recording bin heads         * @param index the index of the table being split         * @param bit the bit of hash to split on         */</span>        <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">split</span><span class="token punctuation">(</span>HashMap<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> map<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> bit<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> b <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Relink into lo and hi lists, preserving order</span>            TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> loHead <span class="token operator">=</span> null<span class="token punctuation">,</span> loTail <span class="token operator">=</span> null<span class="token punctuation">;</span>            TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> hiHead <span class="token operator">=</span> null<span class="token punctuation">,</span> hiTail <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">int</span> lc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> hc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> b<span class="token punctuation">,</span> next<span class="token punctuation">;</span> e <span class="token operator">!=</span> null<span class="token punctuation">;</span> e <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                next <span class="token operator">=</span> <span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                e<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> bit<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>prev <span class="token operator">=</span> loTail<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>                        loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                    <span class="token keyword">else</span>                        loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                    loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                    <span class="token operator">++</span>lc<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>prev <span class="token operator">=</span> hiTail<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>                        hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                    <span class="token keyword">else</span>                        hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                    hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                    <span class="token operator">++</span>hc<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>loHead <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>lc <span class="token operator">&lt;=</span> UNTREEIFY_THRESHOLD<span class="token punctuation">)</span>                    tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">.</span><span class="token function">untreeify</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>hiHead <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// (else is already treeified)</span>                        loHead<span class="token punctuation">.</span><span class="token function">treeify</span><span class="token punctuation">(</span>tab<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>hiHead <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>hc <span class="token operator">&lt;=</span> UNTREEIFY_THRESHOLD<span class="token punctuation">)</span>                    tab<span class="token punctuation">[</span>index <span class="token operator">+</span> bit<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">.</span><span class="token function">untreeify</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    tab<span class="token punctuation">[</span>index <span class="token operator">+</span> bit<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>loHead <span class="token operator">!=</span> null<span class="token punctuation">)</span>                        hiHead<span class="token punctuation">.</span><span class="token function">treeify</span><span class="token punctuation">(</span>tab<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：<br>其实跟链表大同小异，核心就是把之前一个位置的元素按照索引分成了两个部分，并保证了顺序~</p><h2 id="丢失元素"><a href="#丢失元素" class="headerlink" title="丢失元素"></a>丢失元素</h2><p>至于丢失元素这个问题，就很简单了，<code>HashMap</code>并没有去解决这个问题，毕竟本身就不是线程安全的~<br>简单提一嘴就是，在<code>putVal</code>方法中(见下面代码)~<br>假设两个线程同时执行到<code>1</code>处，然后第一个线程执行完之后，第二个线程得到了CPU开始执行，那么<code>tab[i]</code>的值就是第二个线程的元素了~<br>第一个线程的元素被覆盖掉了~<br>如果要解决这个问题，请使用<code>ConcurrentHashMap</code>~</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">final</span> V <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span>                   <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>             tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://yikun.github.io/2015/04/01/Java-HashMap%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/">Java-HashMap工作原理及实现</a><br><a href="https://www.cnblogs.com/xrq730/p/5037299.html">并发时的问题1</a><br><a href="https://cloud.tencent.com/developer/article/1120823">并发时的问题2</a><br><a href="https://zhuanlan.zhihu.com/p/111501405">面试问题</a></p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> HashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Mybatis使用useGeneratedKeys获取自增主键</title>
      <link href="/2020/08/13/guan-yu-mybatis-shi-yong-usegeneratedkeys-huo-qu-zi-zeng-zhu-jian/"/>
      <url>/2020/08/13/guan-yu-mybatis-shi-yong-usegeneratedkeys-huo-qu-zi-zeng-zhu-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>我们经常使用useGenerateKeys来返回自增主键，避免多一次查询。也会经常使用on duplicate key update，来进行批量的upsert。<br>用起来真的很方便，但是最近在用的过程中，不小心掉进了坑里，所以这里来记录一下～</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>先描述一下这个坑：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upsert<span class="token punctuation">"</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.List<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  insert into app_product_phase(id, name, created_by, created_at, updated_by, updated_at)  VALUES  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    (#<span class="token entity" title="&#123;">&amp;#123;</span>item.id<span class="token entity" title="&#125;">&amp;#125;</span>, #<span class="token entity" title="&#123;">&amp;#123;</span>item.name<span class="token entity" title="&#125;">&amp;#125;</span>, #<span class="token entity" title="&#123;">&amp;#123;</span>entity.createdBy<span class="token entity" title="&#125;">&amp;#125;</span>, NOW(), #<span class="token entity" title="&#123;">&amp;#123;</span>entity.updatedBy<span class="token entity" title="&#125;">&amp;#125;</span>, NOW())  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>  on duplicate key update updated_by = values(updated_by), updated_at = NOW()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我需要将一个<code>list</code>批量插入到数据库中，起初，只是插入进去就可以了，所以这么写并没有任何问题～<br>但是后来由于业务原因，需要对这些数据做一些后续处理，所以需要拿到他们的自增<code>id</code>。<br>然后并没有修改代码，结果发现了很大的问题，除了第一条数据有<code>id</code>之后，其他数据的<code>id</code>均是<code>0</code>～<br>而且，即使第一条数据的<code>id</code>也不一定是对的～<br>这里分两种情况，如果第一条数据是新插入的行，那么这个<code>id</code>就是真实的～ 否则那就是后面数据中第一个新插入行的<code>id</code>～如果没有新插入行，那么这个<code>id</code>似乎是最后一条<code>update</code>那行数据的<code>id</code>（这里不怎么确定）。<br>但是，明明<code>Mybatis</code>的<code>3.3.1</code>之后的版本都是支持批量插入时返回自增主键的，就很困惑～<br>但是当我尝试把<code>on duplicate key update</code>去掉后，确实拿到的数据都是对的，那么问题就出现在这一句了～<br>接下来，我们就分析一下这到底是咋回事～</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="Mybatis怎么获得自增主键的？"><a href="#Mybatis怎么获得自增主键的？" class="headerlink" title="Mybatis怎么获得自增主键的？"></a>Mybatis怎么获得自增主键的？</h2><p>我们都知道，如果想在<code>insert</code>后得到数据的自增主键，那么我们需要使用<code>useGeneratedKeys=&quot;true&quot;</code>。<br>所以很自然，我们需要去看看这个东西到底是怎么回事～<br>在<code>Mybatis</code>的<a href="https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#insert_update_and_delete">官方文档</a>中，有这么一句话：</p><blockquote><p>useGeneratedKeys    （仅适用于 insert 和 update）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键（比如：像 MySQL 和 SQL Server 这样的关系型数据库管理系统的自动递增字段），默认值：false。</p></blockquote><p>所以，我们就知道了，<code>Mybatis</code>时使用<code>JDBC</code>的<code>getGeneratedKeys</code>方法做的这件事～</p><h2 id="JDBC的getGeneratedKeys方法"><a href="#JDBC的getGeneratedKeys方法" class="headerlink" title="JDBC的getGeneratedKeys方法"></a>JDBC的getGeneratedKeys方法</h2><p>我在项目中找到了对应的代码(<code>mysql-connector-java</code>:<code>5.1.46</code>:<code>com/mysql/jdbc/StatementImpl.java:1576</code>)</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * @throws SQLException     */</span>    <span class="token keyword">public</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>ResultSet <span class="token function">getGeneratedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token function">checkClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConnectionMutex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>retrieveGeneratedKeys<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> SQLError<span class="token punctuation">.</span><span class="token function">createSQLException</span><span class="token punctuation">(</span>Messages<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"Statement.GeneratedKeysNotRequested"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> SQLError<span class="token punctuation">.</span>SQL_STATE_ILLEGAL_ARGUMENT<span class="token punctuation">,</span>                        <span class="token function">getExceptionInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>batchedGeneratedKeys <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastQueryIsOnDupKeyUpdate<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>generatedKeysResults <span class="token operator">=</span> <span class="token function">getGeneratedKeysInternal</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>generatedKeysResults <span class="token operator">=</span> <span class="token function">getGeneratedKeysInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            fields<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Field</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"GENERATED_KEY"</span><span class="token punctuation">,</span> Types<span class="token punctuation">.</span>BIGINT<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fields<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setConnection</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>generatedKeysResults <span class="token operator">=</span> com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>ResultSetImpl<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentCatalog<span class="token punctuation">,</span> fields<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RowDataStatic</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>batchedGeneratedKeys<span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>connection<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>generatedKeysResults<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>划重点啊～ 请看中间部分的<code>if</code>判断，这里是把是否使用<code>on duplicate key update</code>分别做了不同的处理，其中使用<code>on duplicate key update</code>的调用了<code>getGeneratedKeysInternal()</code>函数，并传入<code>1</code>作为参数；而其他的则调用<code>getGeneratedKeysInternal()</code>函数。</p><p>我们先看<code>getGeneratedKeysInternal()</code>函数：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">protected</span> ResultSetInternalMethods <span class="token function">getGeneratedKeysInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> numKeys <span class="token operator">=</span> <span class="token function">getLargeUpdateCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">getGeneratedKeysInternal</span><span class="token punctuation">(</span>numKeys<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>很简单，他其实就是取了一下受影响的行数，之后同样调用了带参数的<code>getGeneratedKeysInternal()</code>方法。那么接下来看一下这个方法：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">protected</span> ResultSetInternalMethods <span class="token function">getGeneratedKeysInternal</span><span class="token punctuation">(</span><span class="token keyword">long</span> numKeys<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token function">checkClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConnectionMutex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            fields<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Field</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"GENERATED_KEY"</span><span class="token punctuation">,</span> Types<span class="token punctuation">.</span>BIGINT<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fields<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setConnection</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>            fields<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setUseOldNameMetadata</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ArrayList<span class="token operator">&lt;</span>ResultSetRow<span class="token operator">></span> rowSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>ResultSetRow<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> beginAt <span class="token operator">=</span> <span class="token function">getLastInsertID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>beginAt <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// looking at an UNSIGNED BIGINT that has overflowed</span>                fields<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setUnsigned</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>results <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                String serverInfo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>results<span class="token punctuation">.</span><span class="token function">getServerInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//</span>                <span class="token comment" spellcheck="true">// Only parse server info messages for 'REPLACE' queries</span>                <span class="token comment" spellcheck="true">//</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>numKeys <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>results<span class="token punctuation">.</span><span class="token function">getFirstCharOfQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'R'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>serverInfo <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>serverInfo<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    numKeys <span class="token operator">=</span> <span class="token function">getRecordCountFromInfo</span><span class="token punctuation">(</span>serverInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>beginAt <span class="token operator">!=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">/* BIGINT UNSIGNED can wrap the protocol representation */</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>numKeys <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numKeys<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>                        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> row <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>beginAt <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                            row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>beginAt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> asBytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                            asBytes<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>beginAt <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            asBytes<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>beginAt <span class="token operator">>>></span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            asBytes<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>beginAt <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            asBytes<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>beginAt <span class="token operator">>>></span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            asBytes<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>beginAt <span class="token operator">>>></span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            asBytes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>beginAt <span class="token operator">>>></span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            asBytes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>beginAt <span class="token operator">>>></span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            asBytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>beginAt <span class="token operator">>>></span> <span class="token number">56</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            BigInteger val <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> asBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>                            row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                        rowSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayRow</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> <span class="token function">getExceptionInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        beginAt <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">getAutoIncrementIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>ResultSetImpl gkRs <span class="token operator">=</span> com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>ResultSetImpl<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentCatalog<span class="token punctuation">,</span> fields<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RowDataStatic</span><span class="token punctuation">(</span>rowSet<span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>connection<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> gkRs<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个函数稍有点长，不过我们不用太在意细节～ 我们要看的就几点：</p><ol><li>参数：主键的数量。上文可知，使用<code>on duplicate key update</code>时，我们传入的这个参数是<code>1</code>，没使用时，传入的才是真正插入到数据库中的行数。这个是为啥呢，请看下文～</li><li>获取上一次<code>insert</code>的（第一个）主键</li><li>根据受影响的行数（也就是新插入的行数），依次处理主键</li><li>因为是自增主键，所以获取自增的增量，逐个累加来计算主键。</li></ol><p>从这几段代码可以看出来，我们上面<code>sql</code>执行后得到的结果，完全是没有问题的，即使用了<code>on duplicate key update</code>语句时，只有第一条数据的主键是正确的。<br>因为，在<code>jdbc</code>中，的的确确就只给我们拿了第一行数据的主键。<br>不过，从这里也可以看出这么做的原因，那就是，如果只是插入的话，那么主键是可以被计算出来的；而如果是对已经存在的数据进行修改的话，那么主键是无法通过这种方式计算出来的。<br>这也是为啥使用<code>on duplicate key update</code>时，<code>numKeys</code>参数传入的是<code>1</code>。</p><p>此外，如果使用了<code>on duplicate key update</code>，那么通过<code>getLargeUpdateCount()</code>方法获取到的受影响行数也是不准确的，具体请见下文哈～</p><h2 id="受影响行数"><a href="#受影响行数" class="headerlink" title="受影响行数"></a>受影响行数</h2><p>在<code>Mysql</code>的<a href="https://dev.mysql.com/doc/refman/5.6/en/insert-on-duplicate.html">官方文档</a>中是这么写的：</p><blockquote><p>With ON DUPLICATE KEY UPDATE, the affected-rows value per row is 1 if the row is inserted as a new row, 2 if an existing row is updated, and 0 if an existing row is set to its current values. If you specify the CLIENT_FOUND_ROWS flag to the mysql_real_connect() C API function when connecting to mysqld, the affected-rows value is 1 (not 0) if an existing row is set to its current values.</p></blockquote><p>也就是说，在<code>on duplicate key update</code>时，这个受影响行数分3种情况，第一种是插入，插入一行就返回<code>1</code>；第二种是修改，修改一行就返回<code>2</code>；第三种是修改了但是数据未变，这种情况根据不同的配置，返回<code>0</code>或<code>1</code>。<br>而如果我们的语句中不带<code>on duplicate key update</code>，那么受影响行数自然就是插入的行数了～</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>为啥<code>getLastInsertID()</code>方法只返回第一个插入行（注意是新插入行，不是第一个受影响行）的主键呢，如果直接返回全部的不就好了吗？也不用再逐行再计算一边了，还能解决这个<code>on duplicate key update</code>的问题。<br>在<code>Mysql</code>的<a href="https://dev.mysql.com/doc/refman/5.6/en/example-auto-increment.html">官方文档</a>上有这么一句话哈～</p><blockquote><p>For a multiple-row insert, LAST_INSERT_ID() and mysql_insert_id() actually return the AUTO_INCREMENT key from the first of the inserted rows. This enables multiple-row inserts to be reproduced correctly on other servers in a replication setup.</p></blockquote><p>再深入的调查就没有了～  如有大神看见，请指点～</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>在<code>Mybatis</code>的<code>3.3.1</code>之后的版本中，可以在批量<code>insert</code>中得到所有数据的主键。<br>但是如果是批量<code>upsert</code>，即使用了<code>on duplicate key update</code>，不行～</p>]]></content>
      
      
      <categories>
          
          <category> 遇到的问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> issue </tag>
            
            <tag> Mybatis </tag>
            
            <tag> useGeneratedKeys </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
